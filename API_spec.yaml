openapi: 3.0.3
info:
  title: Gamified Learning System API
  version: 1.0.0
  description: API for managing user authentication, course creation, content management, student engagement, and system administration in a gamified learning platform.

servers:
  - url: https://api.example.com/v1
    description: Production server

tags:
  - name: Authentication
    description: User registration, login, logout, password reset, and multi-factor authentication endpoints
  - name: Role Management
    description: Role-based access management for different user roles
  - name: Course Management
    description: Endpoints for creating and managing courses and content
  - name: Student Engagement
    description: Endpoints for students to interact with content and track progress
  - name: Admin
    description: System administration endpoints for user and course management

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT token for authenticated access
        token_type:
          type: string
          example: "Bearer"
        expires_in:
          type: integer
          description: Token expiration time in seconds
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        gmail:
          type: string
          format: email
        hashed_password:
          type: string
        phone_number:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        user_type:
          type: string
          enum: [student, teacher, admin]

    Feedback:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        upload_date:
          type: string
          format: date-time
        teacher_id:
          type: string
          format: uuid
        progress_id:
          type: string
          format: uuid

    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        upload_date:
          type: string
          format: date-time
        teacher_id:
          type: string
          format: uuid
        theme_id:
          type: string
          format: uuid

    Theme:
      type: object
      properties:
        id:
          type: string
          format: uuid
        image_url:
          type: string
        upload_date:
          type: string
          format: date-time

    Island:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        position:
          type: integer
        course_id:
          type: string
          format: uuid
        prerequisites:
          type: array
          items:
            type: string
            format: uuid

    PrerequisiteIsland:
      type: object
      properties:
        island_id:
          type: string
          format: uuid
        prerequisite_island:
          type: string
          format: uuid

    Level:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        position:
          type: integer
        island_id:
          type: string
          format: uuid

    Reward:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        requirement:
          type: string
        course_id:
          type: string
          format: uuid
        island_id:
          type: string
          format: uuid
        level_id:
          type: string
          format: uuid

    Achievement:
      type: object
      properties:
        student_id:
          type: string
          format: uuid
        reward_id:
          type: string
          format: uuid

    TestCase:
      type: object
      properties:
        id:
          type: string
          format: uuid
        is_sample:
          type: boolean
        input:
          type: object
          additionalProperties: true
        output:
          type: object
          additionalProperties: true
        code_problem_id:
          type: string
          format: uuid

    SlideCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        parameter:
          type: object
          additionalProperties: true

    Slide:
      type: object
      properties:
        id:
          type: string
          format: uuid
        challenge_id:
          type: string
          format: uuid
        parameter_value:
          type: object
          additionalProperties: true
        category_id:
          type: string
          format: uuid

    Challenge:
      type: object
      properties:
        id:
          type: string
          format: uuid
        level_id:
          type: string
          format: uuid

    MiniGame:
      type: object
      properties:
        id:
          type: string
          format: uuid
        challenge_id:
          type: string
          format: uuid
        type:
          type: string
        description:
          type: object
          additionalProperties: true
        answer:
          type: object
          additionalProperties: true

    CodeProblem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        level_id:
          type: string
          format: uuid

    Video:
      type: object
      properties:
        id:
          type: string
          format: uuid
        level_id:
          type: string
          format: uuid
        url:
          type: string

    Progress:
      type: object
      properties:
        id:
          type: string
          format: uuid
        student_id:
          type: string
          format: uuid
        progress:
          type: object
          additionalProperties: true
        start_date:
          type: string
          format: date-time
        finish_date:
          type: string
          format: date-time
        course_id:
          type: string
          format: uuid
        island_id:
          type: string
          format: uuid
        level_id:
          type: string
          format: uuid

    CategoryManagement:
      type: object
      properties:
        category_id:
          type: string
          format: uuid
        admin_id:
          type: string
          format: uuid

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        details:
          type: array
          items:
            type: string

paths:
  # --- Authentication Endpoints ---
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: Register a new user with required details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                phone_number:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                user_type:
                  type: string
                  enum: [student, teacher, admin]
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate a user and provide a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User authenticated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid email or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Log out user
      description: Invalidate the current session's token.
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User logged out successfully.
        '401':
          description: Unauthorized request - user must be logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/reset-password:
    post:
      tags: [Authentication]
      summary: Password reset request
      description: Request a password reset link to be sent to the user's registered email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset link sent.
        '404':
          description: User with specified email not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify-otp:
    post:
      tags: [Authentication]
      summary: Verify OTP for multi-factor authentication
      description: Verify an OTP sent to the user's registered phone or email for sensitive actions.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: OTP verified successfully.
        '400':
          description: Invalid OTP or expired OTP.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Role Management Endpoints ---
  /auth/roles:
    get:
      tags: [Role Management]
      summary: Get available roles and permissions
      description: Retrieve the list of user roles and permissions for role-based access control.
      responses:
        '200':
          description: List of available roles and permissions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: string
                      enum: [student, teacher, admin]

  /users/{userId}/roles:
    get:
      tags: [Role Management]
      summary: Get user role and permissions
      description: Retrieve a specific user's role and permissions.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User role and permissions retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  role:
                    type: string
                    enum: [student, teacher, admin]
                  permissions:
                    type: array
                    items:
                      type: string
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  
    patch:
      tags: [Role Management]
      summary: Update user role and permissions
      description: Admin can update a user's role or permissions.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [student, teacher, admin]
                permissions:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: User role updated successfully.
        '403':
          description: Forbidden - Only admins can modify roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Course Creation and Management ---
  /courses:
    post:
      tags: [Course Management]
      summary: Create a new course
      description: Teachers and admins can create a new course with attributes like name, description, and teacher_id.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                teacher_id:
                  type: string
                  format: uuid
                theme_id:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Course created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '403':
          description: Forbidden - Only teachers and admins can create courses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [Course Management]
      summary: List all courses
      description: Retrieve all available courses with their details.
      responses:
        '200':
          description: List of all courses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'

  /courses/{courseId}:
    get:
      tags: [Course Management]
      summary: Get course by ID
      description: Retrieve detailed information of a specific course.
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '404':
          description: Course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      tags: [Course Management]
      summary: Update course details
      description: Modify course details, such as name and description (Teacher/Admin only).
      security:
        - bearerAuth: []
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                theme_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Course updated successfully.
        '403':
          description: Forbidden - Only teachers and admins can update courses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Course Management]
      summary: Delete a course
      description: Admins can delete a course by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Course deleted successfully.
        '403':
          description: Forbidden - Only admins can delete courses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Roadmap and Island Management ---
  /courses/{courseId}/islands:
    post:
      tags: [Course Management]
      summary: Add an island to a course
      description: Teachers can add islands to create a course roadmap.
      security:
        - bearerAuth: []
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                position:
                  type: integer
                prerequisites:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '201':
          description: Island added to course successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Island'
        '404':
          description: Course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /courses/{courseId}/islands/{islandId}:
    get:
      tags: [Course Management]
      summary: Retrieve specific island details
      description: Get details of a specific island in a course roadmap.
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: islandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Island details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Island'
        '404':
          description: Course or island not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      tags: [Course Management]
      summary: Update island properties
      description: Modify properties of an island, such as prerequisites and position.
      security:
        - bearerAuth: []
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: islandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                position:
                  type: integer
                prerequisites:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Island updated successfully.
        '404':
          description: Course or island not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Level and Content Management within Islands ---
  /islands/{islandId}/levels:
    post:
      tags: [Course Management]
      summary: Add a new level to an island
      description: Teachers can add levels with content such as quizzes, slides, and coding challenges to an island.
      security:
        - bearerAuth: []
      parameters:
        - name: islandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                position:
                  type: integer
                content:
                  type: array
                  items:
                    type: string
                    description: "Content identifiers such as video URLs, quizzes, and coding challenges"
      responses:
        '201':
          description: Level added to island successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Level'
        '404':
          description: Island not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  # --- Roadmap Display and Level Access ---
  /courses/{courseId}/roadmap:
    get:
      tags: [Student Engagement]
      summary: Display the visual roadmap for a course
      description: Retrieve the roadmap showing islands and levels for a specific course. Displays locked/unlocked islands based on student progress.
      security:
        - bearerAuth: []
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course roadmap retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  roadmap:
                    type: array
                    items:
                      $ref: '#/components/schemas/Island'
        '404':
          description: Course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /islands/{islandId}/levels/{levelId}:
    get:
      tags: [Student Engagement]
      summary: Access specific level content
      description: Retrieve content details for a specific level within an island, including quizzes, videos, slides, and coding challenges.
      security:
        - bearerAuth: []
      parameters:
        - name: islandId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: levelId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Level content retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Level'
        '404':
          description: Island or level not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Engagement with Level Content ---
  /levels/{levelId}/quizzes/{quizId}/submit:
    post:
      tags: [Student Engagement]
      summary: Submit quiz answers for a level
      description: Students can submit answers for a quiz within a level, and receive immediate feedback.
      security:
        - bearerAuth: []
      parameters:
        - name: levelId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: quizId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answers:
                  type: array
                  items:
                    type: string
                    description: Answer submissions for quiz questions
      responses:
        '200':
          description: Quiz submitted and graded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  score:
                    type: integer
                    description: Quiz score based on correct answers
                  feedback:
                    type: array
                    items:
                      type: string
                      description: Feedback for each question
        '404':
          description: Level or quiz not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /levels/{levelId}/coding-challenges/{challengeId}/submit:
    post:
      tags: [Student Engagement]
      summary: Submit coding challenge solution
      description: Students submit code for a coding challenge, which is then compiled and checked for correctness.
      security:
        - bearerAuth: []
      parameters:
        - name: levelId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: challengeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: Student's code submission
      responses:
        '200':
          description: Code evaluated with results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: Compilation and correctness feedback
                  errors:
                    type: array
                    items:
                      type: string
                      description: List of errors, if any
        '404':
          description: Level or challenge not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /levels/{levelId}/hints:
    get:
      tags: [Student Engagement]
      summary: Retrieve hints for level content
      description: Students can access hints or explanations for quizzes or coding challenges within a level.
      security:
        - bearerAuth: []
      parameters:
        - name: levelId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Hints retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  hints:
                    type: array
                    items:
                      type: string
                      description: Hint or explanation text
        '404':
          description: Level not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Reward and Motivation System ---
  /students/{studentId}/rewards:
    get:
      tags: [Student Engagement]
      summary: Retrieve earned rewards and badges
      description: Students can view their earned points, badges, and rewards based on their course progress.
      security:
        - bearerAuth: []
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Rewards retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  rewards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reward'
        '404':
          description: Student not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /leaderboard/{courseId}:
    get:
      tags: [Student Engagement]
      summary: Display leaderboard for a course
      description: Retrieve the leaderboard showing top students based on points and progress in the course.
      security:
        - bearerAuth: []
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Leaderboard retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: string
                      format: uuid
                    points:
                      type: integer
                      description: Total points earned
                    rank:
                      type: integer
                      description: Student rank based on points
        '404':
          description: Course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- User Management ---
  /admin/users:
    get:
      tags: [Admin]
      summary: List all users (Admin only)
      description: Admins can view all users with filters such as role and status.
      security:
        - bearerAuth: []
      parameters:
        - name: role
          in: query
          schema:
            type: string
            enum: [student, teacher, admin]
            description: Filter users by role
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, locked]
            description: Filter users by status
      responses:
        '200':
          description: List of all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Forbidden - Only admins can view users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users/{userId}:
    patch:
      tags: [Admin]
      summary: Update user profile or role (Admin only)
      description: Admins can update a user’s profile, such as changing roles or status.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                user_type:
                  type: string
                  enum: [student, teacher, admin]
                status:
                  type: string
                  enum: [active, inactive, locked]
      responses:
        '200':
          description: User profile updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden - Only admins can update user profiles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Admin]
      summary: Delete a user account (Admin only)
      description: Admins can delete a specific user account.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User account deleted successfully.
        '403':
          description: Forbidden - Only admins can delete user accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Course Management ---
  /admin/courses:
    get:
      tags: [Admin]
      summary: View all courses (Admin only)
      description: Admins can view a list of all courses and filter them.
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, disabled]
            description: Filter courses by status
      responses:
        '200':
          description: List of all courses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '403':
          description: Forbidden - Only admins can view courses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/courses/{courseId}/visibility:
    patch:
      tags: [Admin]
      summary: Update course visibility (Admin only)
      description: Admins can enable or disable a course’s visibility in the system.
      security:
        - bearerAuth: []
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                visibility:
                  type: string
                  enum: [enabled, disabled]
                  description: Set the visibility of the course
      responses:
        '200':
          description: Course visibility updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '403':
          description: Forbidden - Only admins can update course visibility.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Content Template Management ---
  /admin/templates:
    post:
      tags: [Admin]
      summary: Create a content template (Admin only)
      description: Admins can create new templates for quizzes, slides, and coding activities.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [quiz, slide, coding]
                  description: The type of content template
                parameters:
                  type: object
                  additionalProperties: true
                  description: Template parameters, e.g., default quiz questions or code settings
      responses:
        '201':
          description: Template created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  type:
                    type: string
                  parameters:
                    type: object
        '403':
          description: Forbidden - Only admins can create templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [Admin]
      summary: View all content templates (Admin only)
      description: Admins can view a list of all available templates.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all templates.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    type:
                      type: string
                    parameters:
                      type: object
                      additionalProperties: true
        '403':
          description: Forbidden - Only admins can view templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/templates/{templateId}:
    delete:
      tags: [Admin]
      summary: Delete a content template (Admin only)
      description: Admins can delete specific content templates by ID.
      security:
        - bearerAuth: []
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Template deleted successfully.
        '403':
          description: Forbidden - Only admins can delete templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Template not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- System Logs Management ---
  /admin/logs:
    get:
      tags: [Admin]
      summary: View system logs (Admin only)
      description: Admins can view system logs capturing key events, errors, and user activities.
      security:
        - bearerAuth: []
      parameters:
        - name: start_date
          in: query
          schema:
            type: string
            format: date-time
            description: Start date for log filtering
        - name: end_date
          in: query
          schema:
            type: string
            format: date-time
            description: End date for log filtering
        - name: log_type
          in: query
          schema:
            type: string
            enum: [error, activity, access]
            description: Filter logs by type
      responses:
        '200':
          description: System logs retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
                    log_type:
                      type: string
                      enum: [error, activity, access]
                    message:
                      type: string
                      description: Log message details
        '403':
          description: Forbidden - Only admins can view system logs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

